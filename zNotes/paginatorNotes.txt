start in the view

Function view:
    import below
    from django.core.paginator import Paginator
    use case:  
        make a paginator with "paginator_var = Paginator(Model.objects.all(), 4(paginate_by))"
        set up each page with "page = request.GET.get('page')"
        put it all together with "paged_paginator_var = paginator_var.get_page('page')"
        replace context with the paged_paginator_var
        NOTE** If writing a custom query where a dictionary is normally used, you have use a tuple instead.
        Easiest way to do this is write a list generator and convert to a tuple in the Paginator function.
        Example -   custom_query = [('x', x) for x in Model.objects.all())]
                    paginator_var = Paginator(tuple(custom_query), 5(paginate_by))**

Class view:
    add "paginate_by = number" as an attribute

Next, go to the template:

From Function:
    use your context name the base variable

From Class:
    use page_obj as base variable

        attributes of the paginator object:
            - .has_previous
            - .has_next
            - .number (current page)
            - .paginator.page_range
            - .paginator.num_pages
            - .previous_page_number
            - .next_page_number
            - .object_list (access the queryset from a function view)

How to go back to the previous page from a list view:

See components.views ListFood, UpdateFood, DeleteFood and corresponding templates OR
https://stackoverflow.com/questions/40462994/django-pagination-how-to-redirect-back-to-a-listview-and-a-page-number/68640959#68640959

Start in listview and add context with:
    def get_context_data(self, **kwargs):
        kwargs['current_page'] = self.request.GET.get('page', 1)
        return super().get_context_data(**kwargs)

Go to list template and add this, "?next={{current_page}}", to the end of the href on the anchor tag:
    <a class="btn btn-secondary" style="background-color: rgb(10, 124, 0);"
            href="{% url 'aisle_update' pk=aisle.pk %}?next={{current_page}}">Update
            {{aisle}}</a>

Then go back to the views that are the target of the anchor tag and context and success URL:
    def get_success_url(self, **kwargs):
        if self.request.GET.get('next'):
            return f"/recipe_book/list?page={self.request.GET.get('next', 1)}"
        else:
            return '/recipe_book/list'

    def get_context_data(self, **kwargs):
        kwargs['last_page'] = self.request.GET.get('next', 1)
        return super().get_context_data(**kwargs)
    *** this is so you can add the target page to an anchor tag *** 